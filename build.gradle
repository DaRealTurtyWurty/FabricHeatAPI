plugins {
	id 'fabric-loom' version '1.9-SNAPSHOT'
	id 'java'
	id 'maven-publish'
}

def ENV = System.getenv()
version = project.mod_version
group = project.maven_group

base {
	archivesName = project.archives_base_name
}

dependencies {
	minecraft "com.mojang:minecraft:${project.minecraft_version}"
	mappings "net.fabricmc:yarn:${project.yarn_mappings}:v2"
	modImplementation "net.fabricmc:fabric-loader:${project.loader_version}"

	modApi fabricApi.module("fabric-transfer-api-v1", project.fabric_version)
	
}

processResources {
	inputs.property "version", project.version

	filesMatching("fabric.mod.json") {
		expand "version": project.version
	}
}

tasks.withType(JavaCompile).configureEach {
	it.options.encoding = "UTF-8"
	it.options.release = 21
}

java {
	withSourcesJar()

	sourceCompatibility = JavaVersion.VERSION_21
	targetCompatibility = JavaVersion.VERSION_21
}

jar {
	from("LICENSE") {
		rename { "${it}_${project.base.archivesName.get()}"}
	}
}

publishing {
	publications {
		create("mavenJava", MavenPublication) {
			groupId project.group
			artifactId project.base.archivesName.get()
			version project.version

			from components.java
		}
	}

	repositories {
		if(ENV.MAVEN_URL) {
			maven {
				url = ENV.MAVEN_URL
				credentials {
					username = ENV.MAVEN_USERNAME
					password = ENV.MAVEN_PASSWORD
				}
			}
		}
	}
}

tasks.register('checkVersion') {
	doFirst {
		def xml = new URI(ENV.MAVEN_URL + "/" + project.group.replace(".", "/") + "/" + project.base.archivesName.get() + "/maven-metadata.xml").toURL().text
		def metadata = new groovy.xml.XmlSlurper().parseText(xml)
		def versions = metadata.versioning.versions.version*.text()
		if (versions.contains(project.version)) {
			throw new GradleException("Version ${project.version} already exists!")
		}
	}
}

tasks.publish.mustRunAfter checkVersion